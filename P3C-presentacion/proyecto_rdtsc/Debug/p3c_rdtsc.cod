; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29913.0 

	TITLE	C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\Debug\p3c_rdtsc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?a_int@@3PAHA					; a_int
PUBLIC	?b_int@@3PAHA					; b_int
PUBLIC	?a@@3PAMA					; a
PUBLIC	?b@@3PAMA					; b
PUBLIC	?c@@3PAMA					; c
PUBLIC	?d@@3PAMA					; d
PUBLIC	?e@@3PAMA					; e
PUBLIC	?f@@3PAMA					; f
PUBLIC	?g@@3PAMA					; g
PUBLIC	?h@@3PAMA					; h
PUBLIC	?z@@3MA						; z
PUBLIC	?cond1@@3PAHA					; cond1
PUBLIC	?cond2@@3PAHA					; cond2
PUBLIC	?cond3@@3PAHA					; cond3
_BSS	SEGMENT
?a_int@@3PAHA DD 0800H DUP (?)				; a_int
?b_int@@3PAHA DD 0808H DUP (?)				; b_int
?a@@3PAMA DD	0808H DUP (?)				; a
?b@@3PAMA DD	0808H DUP (?)				; b
?c@@3PAMA DD	0808H DUP (?)				; c
?d@@3PAMA DD	0808H DUP (?)				; d
?e@@3PAMA DD	0808H DUP (?)				; e
?f@@3PAMA DD	0808H DUP (?)				; f
?g@@3PAMA DD	0808H DUP (?)				; g
?h@@3PAMA DD	0808H DUP (?)				; h
?z@@3MA	DD	01H DUP (?)				; z
?cond1@@3PAHA DD 0800H DUP (?)				; cond1
?cond2@@3PAHA DD 0808H DUP (?)				; cond2
?cond3@@3PAHA DD 0808H DUP (?)				; cond3
_BSS	ENDS
msvcjmc	SEGMENT
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__B49664B7_stdlib@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__A0B61CF9_time@h DB 01H
__140C6C39_vcruntime_new@h DB 01H
__87B059B9_cstdlib DB 01H
__A04A6B21_cmath DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__954779B2_type_traits DB 01H
__3DEA1BC8_xutility DB 01H
__20BB4341_malloc@h DB 01H
__6326519C_vcruntime_exception@h DB 01H
__23BC4E3F_exception DB 01H
__394CBC60_limits DB 01H
__DA28BFF1_xmemory DB 01H
__AEFB396D_xstring DB 01H
__AAF27462_stdexcept DB 01H
__CDA344A6_xcall_once@h DB 01H
__D26F7955_xthreads@h DB 01H
__5279E0A2_atomic DB 01H
__72FE5686_system_error DB 01H
__3432EAAE_vcruntime_typeinfo@h DB 01H
__4D35E8D1_typeinfo DB 01H
__85E2B0EE_memory DB 01H
__A9A7E7E1_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__52BC0B19_xlocinfo DB 01H
__71C54D5C_xlocale DB 01H
__6B597C0A_xiosbase DB 01H
__EF422B4B_xlocnum DB 01H
__9A4A7882_ios DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__D4435474_winerror@h DB 01H
__B3ED30D4_winbase@h DB 01H
__DB057BA3_winuser@h DB 01H
__A7113148_winioctl@h DB 01H
__EC5BC72C_propidl@h DB 01H
__6DA674A0_oleauto@h DB 01H
__A118E6DC_stralign@h DB 01H
__A79CFD3F_p3c_rdtsc@cpp DB 01H
__0105A2A2_istream DB 01H
__62D59798_ostream DB 01H
__A852CCDE_streambuf DB 01H
__F5A569E6_iosfwd DB 01H
__2C46AC88_iterator DB 01H
__B0BDDC32_utility DB 01H
__47A24B20_xstddef DB 01H
__29B0C2E9_xatomic@h DB 01H
msvcjmc	ENDS
CONST	SEGMENT
$SG128808 DB	'invalid argument', 00H
	ORG $+3
$SG128809 DB	'%s', 00H
	ORG $+1
$SG128810 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29910\include\xmemory', 00H
$SG128811 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H
	DB	'8', 00H, '6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c'
	DB	00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l'
	DB	00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, '\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\'
	DB	00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H
	DB	'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4'
	DB	00H, '.', 00H, '2', 00H, '8', 00H, '.', 00H, '2', 00H, '9', 00H
	DB	'9', 00H, '1', 00H, '0', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c'
	DB	00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H
	DB	'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H
$SG128812 DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+2
$SG128813 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG128841 DB	'C:\Program Files (x86)\Microsoft Visual Studio\2019\Comm'
	DB	'unity\VC\Tools\MSVC\14.28.29910\include\xlocale', 00H
$SG121615 DB	', ', 00H
	ORG $+1
$SG121616 DB	', ', 00H
	ORG $+1
$SG121617 DB	', ', 00H
	ORG $+1
$SG121618 DB	', ', 00H
	ORG $+1
$SG121619 DB	', ', 00H
	ORG $+1
$SG121623 DB	'-Number of measures Apartado A: ', 00H
	ORG $+3
$SG121620 DB	'ONLY PRINTING OUTPUT VARIABLE TO PREVENT THAT THE COMPIL'
	DB	'ER ELIMINATES FUNCTION CALLS: ', 00H
	ORG $+1
$SG121621 DB	'-Number of elements N_ELEM: ', 00H
	ORG $+3
$SG121622 DB	'-Number of measures example: ', 00H
	ORG $+2
$SG121624 DB	'-Number of measures Apartado B(1): ', 00H
$SG121625 DB	'-Number of measures Apartado B(2): ', 00H
$SG121626 DB	'-Number of measures Apartado C(1): ', 00H
$SG121627 DB	'-Number of measures Apartado C(2): ', 00H
$SG121628 DB	' Minimum time in cycles for an element of ''example'' is'
	DB	': ', 00H
	ORG $+3
$SG121629 DB	' Minimum time in cycles for an element of ''Apartado A'''
	DB	' is: ', 00H
$SG121630 DB	' Minimum time in cycles for an element of ''Apartado B(1'
	DB	')'' is: ', 00H
	ORG $+1
$SG121631 DB	' Minimum time in cycles for an element of ''Apartado B(2'
	DB	')'' is: ', 00H
	ORG $+1
$SG121632 DB	' Minimum time in cycles for an element of ''Apartado C(1'
	DB	')'' is: ', 00H
	ORG $+1
$SG121633 DB	' Minimum time in cycles for an element of ''Apartado C(2'
	DB	')'' is: ', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?vectors_init@@YAXXZ				; vectors_init
PUBLIC	?apartadoA@@YAMXZ				; apartadoA
PUBLIC	?apartadoBPrimeraOpcion@@YAMXZ			; apartadoBPrimeraOpcion
PUBLIC	?apartadoBSegundaOpcion@@YAMXZ			; apartadoBSegundaOpcion
PUBLIC	?apartadoCPrimeraCond@@YAMXZ			; apartadoCPrimeraCond
PUBLIC	?apartadoCSegundaCond@@YAMXZ			; apartadoCSegundaCond
PUBLIC	?example@@YAMXZ					; example
PUBLIC	_main
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	__JustMyCode_Default
PUBLIC	__real@4008000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
PUBLIC	__real@41300000
PUBLIC	__real@46fffe00
EXTRN	__imp__rand:PROC
EXTRN	_strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	??0QPTimer@@QAE@XZ:PROC				; QPTimer::QPTimer
EXTRN	?NumberOfMeasures@QPTimer@@QAEHXZ:PROC		; QPTimer::NumberOfMeasures
EXTRN	?Start@QPTimer@@QAEXXZ:PROC			; QPTimer::Start
EXTRN	?Stop@QPTimer@@QAEXXZ:PROC			; QPTimer::Stop
EXTRN	?Calibrate@QPTimer@@QAEXXZ:PROC			; QPTimer::Calibrate
EXTRN	?Reset@QPTimer@@QAEXXZ:PROC			; QPTimer::Reset
EXTRN	?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z:PROC ; QPTimer::PrintMinimumCyclesByIteration
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$11
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__Zero_uncaught_exceptions$ = -14			; size = 1
tv72 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __62D59798_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00032	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00037	0f b6 c0	 movzx	 eax, al
  0003a	85 c0		 test	 eax, eax
  0003c	75 06		 jne	 SHORT $LN4@sentry
  0003e	c6 45 f3 01	 mov	 BYTE PTR tv72[ebp], 1
  00042	eb 04		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00044	c6 45 f3 00	 mov	 BYTE PTR tv72[ebp], 0
$LN5@sentry:
  00048	8a 4d f3	 mov	 cl, BYTE PTR tv72[ebp]
  0004b	88 4d f2	 mov	 BYTE PTR __Zero_uncaught_exceptions$[ebp], cl

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0004e	0f b6 55 f2	 movzx	 edx, BYTE PTR __Zero_uncaught_exceptions$[ebp]
  00052	85 d2		 test	 edx, edx
  00054	74 0b		 je	 SHORT $LN1@sentry

; 119  :                 this->_Myostr._Osfx();

  00056	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
$LN1@sentry:

; 120  :             }
; 121  :         }

  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00069	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00073	59		 pop	 ecx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
  0007c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv160 = -28						; size = 4
__Tied$ = -24						; size = 4
__Rdbuf$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __62D59798_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0003a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	89 45 e4	 mov	 DWORD PTR tv160[ebp], eax
  00042	8b 4d e4	 mov	 ecx, DWORD PTR tv160[ebp]
  00045	8b 11		 mov	 edx, DWORD PTR [ecx]
  00047	8b 4d e4	 mov	 ecx, DWORD PTR tv160[ebp]
  0004a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00053	89 45 ec	 mov	 DWORD PTR __Rdbuf$2[ebp], eax

; 73   :             if (_Rdbuf) {

  00056	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$2[ebp], 0
  0005a	74 0d		 je	 SHORT $LN7@sentry

; 74   :                 _Rdbuf->_Lock();

  0005c	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$2[ebp]
  0005f	8b 10		 mov	 edx, DWORD PTR [eax]
  00061	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$2[ebp]
  00064	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00067	ff d0		 call	 eax
$LN7@sentry:

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  00070	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00073	8b 11		 mov	 edx, DWORD PTR [ecx]
  00075	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00078	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00088	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0

; 95   :                 return;

  0008f	eb 4d		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00091	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00099	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a2	89 45 e8	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000a5	83 7d e8 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000a9	74 08		 je	 SHORT $LN4@sentry
  000ab	8b 4d e8	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000ae	3b 4d 08	 cmp	 ecx, DWORD PTR __Ostr$[ebp]
  000b1	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	c6 42 04 01	 mov	 BYTE PTR [edx+4], 1

; 101  :                 return;

  000ba	eb 22		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000bc	8b 4d e8	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000c8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ca	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000cd	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000d0	8b ca		 mov	 ecx, edx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000d8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000db	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 106  :         }

  000de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	8b e5		 mov	 esp, ebp
  000f5	5d		 pop	 ebp
  000f6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
tv72 = -20						; size = 4
__Rdbuf$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __62D59798_ostream
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00032	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 08		 mov	 ecx, DWORD PTR [eax]
  00037	89 4d ec	 mov	 DWORD PTR tv72[ebp], ecx
  0003a	8b 55 ec	 mov	 edx, DWORD PTR tv72[ebp]
  0003d	8b 02		 mov	 eax, DWORD PTR [edx]
  0003f	8b 4d ec	 mov	 ecx, DWORD PTR tv72[ebp]
  00042	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0004b	89 45 f0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  0004e	83 7d f0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00052	74 0d		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00054	8b 4d f0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00057	8b 11		 mov	 edx, DWORD PTR [ecx]
  00059	8b 4d f0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0005c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005f	ff d0		 call	 eax
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -140						; size = 8
tv322 = -132						; size = 8
tv397 = -124						; size = 8
tv385 = -116						; size = 8
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
tv325 = -96						; size = 4
tv324 = -92						; size = 4
tv321 = -88						; size = 4
$T5 = -84						; size = 4
$T6 = -80						; size = 4
tv320 = -76						; size = 4
tv307 = -72						; size = 4
tv137 = -68						; size = 4
$T7 = -64						; size = 4
tv135 = -60						; size = 8
tv186 = -52						; size = 4
tv140 = -48						; size = 4
__Count$ = -44						; size = 8
__Pad$ = -36						; size = 8
$T8 = -25						; size = 1
tv323 = -24						; size = 1
$T9 = -23						; size = 1
tv334 = -22						; size = 1
$T10 = -21						; size = 1
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	b9 00 00 00 00	 mov	 ecx, OFFSET __62D59798_ostream
  00031	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  00036	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0003d	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _strlen
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 c0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  0004c	8b 4d c0	 mov	 ecx, DWORD PTR $T7[ebp]
  0004f	33 d2		 xor	 edx, edx
  00051	89 4d d4	 mov	 DWORD PTR __Count$[ebp], ecx
  00054	89 55 d8	 mov	 DWORD PTR __Count$[ebp+4], edx

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0005f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00062	8b ca		 mov	 ecx, edx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0006a	89 45 8c	 mov	 DWORD PTR tv385[ebp], eax
  0006d	89 55 90	 mov	 DWORD PTR tv385[ebp+4], edx
  00070	83 7d 90 00	 cmp	 DWORD PTR tv385[ebp+4], 0
  00074	7c 52		 jl	 SHORT $LN17@operator
  00076	7f 06		 jg	 SHORT $LN64@operator
  00078	83 7d 8c 00	 cmp	 DWORD PTR tv385[ebp], 0
  0007c	76 4a		 jbe	 SHORT $LN17@operator
$LN64@operator:
  0007e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00086	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00089	8b ca		 mov	 ecx, edx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  00091	89 45 84	 mov	 DWORD PTR tv397[ebp], eax
  00094	89 55 88	 mov	 DWORD PTR tv397[ebp+4], edx
  00097	8b 45 88	 mov	 eax, DWORD PTR tv397[ebp+4]
  0009a	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  0009d	7c 29		 jl	 SHORT $LN17@operator
  0009f	7f 08		 jg	 SHORT $LN65@operator
  000a1	8b 4d 84	 mov	 ecx, DWORD PTR tv397[ebp]
  000a4	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000a7	76 1f		 jbe	 SHORT $LN17@operator
$LN65@operator:
  000a9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ac	8b 02		 mov	 eax, DWORD PTR [edx]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000b1	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  000bd	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  000c0	89 45 c4	 mov	 DWORD PTR tv135[ebp], eax
  000c3	89 55 c8	 mov	 DWORD PTR tv135[ebp+4], edx
  000c6	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000c8	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  000cc	c5 f9 13 45 c4	 vmovlpd QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  000d1	8b 4d c4	 mov	 ecx, DWORD PTR tv135[ebp]
  000d4	8b 55 c8	 mov	 edx, DWORD PTR tv135[ebp+4]
  000d7	89 4d dc	 mov	 DWORD PTR __Pad$[ebp], ecx
  000da	89 55 e0	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000dd	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000e0	50		 push	 eax
  000e1	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  000e7	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000ec	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 125  :             return _Ok;

  000f3	8a 8d 78 ff ff
	ff		 mov	 cl, BYTE PTR __Ok$[ebp+4]
  000f9	88 4d eb	 mov	 BYTE PTR $T10[ebp], cl

; 742  : 
; 743  :     if (!_Ok) {

  000fc	0f b6 55 eb	 movzx	 edx, BYTE PTR $T10[ebp]
  00100	85 d2		 test	 edx, edx
  00102	75 0e		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00104	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00107	83 c8 04	 or	 eax, 4
  0010a	89 45 ec	 mov	 DWORD PTR __State$[ebp], eax

; 745  :     } else { // state okay, insert

  0010d	e9 1b 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN

  00112	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00116	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00119	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0011e	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00121	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00127	89 45 bc	 mov	 DWORD PTR tv137[ebp], eax
  0012a	8b 45 bc	 mov	 eax, DWORD PTR tv137[ebp]
  0012d	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00132	83 f8 40	 cmp	 eax, 64			; 00000040H
  00135	0f 84 aa 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0013b	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0013d	8b 4d dc	 mov	 ecx, DWORD PTR __Pad$[ebp]
  00140	83 e9 01	 sub	 ecx, 1
  00143	8b 55 e0	 mov	 edx, DWORD PTR __Pad$[ebp+4]
  00146	83 da 00	 sbb	 edx, 0
  00149	89 4d dc	 mov	 DWORD PTR __Pad$[ebp], ecx
  0014c	89 55 e0	 mov	 DWORD PTR __Pad$[ebp+4], edx
$LN4@operator:
  0014f	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00153	0f 8c 8c 00 00
	00		 jl	 $LN11@operator
  00159	7f 0a		 jg	 SHORT $LN66@operator
  0015b	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  0015f	0f 86 80 00 00
	00		 jbe	 $LN11@operator
$LN66@operator:

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00165	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00170	8b ca		 mov	 ecx, edx
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  00178	88 45 ea	 mov	 BYTE PTR tv334[ebp], al
  0017b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0017e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00180	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00183	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00186	8b ca		 mov	 ecx, edx
  00188	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0018e	89 45 b8	 mov	 DWORD PTR tv307[ebp], eax
  00191	0f b6 45 ea	 movzx	 eax, BYTE PTR tv334[ebp]
  00195	50		 push	 eax
  00196	8b 4d b8	 mov	 ecx, DWORD PTR tv307[ebp]
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0019f	89 45 b4	 mov	 DWORD PTR tv320[ebp], eax
  001a2	8b 4d b4	 mov	 ecx, DWORD PTR tv320[ebp]
  001a5	89 4d ac	 mov	 DWORD PTR $T5[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring

; 456  :         return static_cast<int_type>(EOF);

  001a8	c7 45 b0 ff ff
	ff ff		 mov	 DWORD PTR $T6[ebp], -1

; 448  :         return _Left == _Right;

  001af	8b 55 b0	 mov	 edx, DWORD PTR $T6[ebp]
  001b2	3b 55 ac	 cmp	 edx, DWORD PTR $T5[ebp]
  001b5	75 09		 jne	 SHORT $LN43@operator
  001b7	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv140[ebp], 1
  001be	eb 07		 jmp	 SHORT $LN44@operator
$LN43@operator:
  001c0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv140[ebp], 0
$LN44@operator:
  001c7	8a 45 d0	 mov	 al, BYTE PTR tv140[ebp]
  001ca	88 45 e9	 mov	 BYTE PTR $T9[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001cd	0f b6 4d e9	 movzx	 ecx, BYTE PTR $T9[ebp]
  001d1	85 c9		 test	 ecx, ecx
  001d3	74 0b		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  001d5	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  001d8	83 ca 04	 or	 edx, 4
  001db	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 751  :                     break;

  001de	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  001e0	e9 58 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  001e5	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  001e9	75 50		 jne	 SHORT $LN13@operator
  001eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  001f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f6	8b ca		 mov	 ecx, edx
  001f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fe	89 45 a8	 mov	 DWORD PTR tv321[ebp], eax
  00201	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  00204	50		 push	 eax
  00205	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  00208	51		 push	 ecx
  00209	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0020c	52		 push	 edx
  0020d	8b 4d a8	 mov	 ecx, DWORD PTR tv321[ebp]
  00210	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  00216	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv322[ebp], eax
  0021c	89 55 80	 mov	 DWORD PTR tv322[ebp+4], edx
  0021f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv322[ebp]
  00225	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  00228	75 08		 jne	 SHORT $LN67@operator
  0022a	8b 4d 80	 mov	 ecx, DWORD PTR tv322[ebp+4]
  0022d	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  00230	74 09		 je	 SHORT $LN13@operator
$LN67@operator:

; 757  :             _State |= ios_base::badbit;

  00232	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  00235	83 ca 04	 or	 edx, 4
  00238	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  0023b	83 7d ec 00	 cmp	 DWORD PTR __State$[ebp], 0
  0023f	0f 85 a2 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00245	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00247	8b 45 dc	 mov	 eax, DWORD PTR __Pad$[ebp]
  0024a	83 e8 01	 sub	 eax, 1
  0024d	8b 4d e0	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  00250	83 d9 00	 sbb	 ecx, 0
  00253	89 45 dc	 mov	 DWORD PTR __Pad$[ebp], eax
  00256	89 4d e0	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00259	83 7d e0 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  0025d	0f 8c 84 00 00
	00		 jl	 $LN14@operator
  00263	7f 06		 jg	 SHORT $LN68@operator
  00265	83 7d dc 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00269	76 7c		 jbe	 SHORT $LN14@operator
$LN68@operator:

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026b	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0026e	8b 02		 mov	 eax, DWORD PTR [edx]
  00270	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00273	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00276	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0027c	88 45 e8	 mov	 BYTE PTR tv323[ebp], al
  0027f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00282	8b 11		 mov	 edx, DWORD PTR [ecx]
  00284	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00287	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0028a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00290	89 45 a4	 mov	 DWORD PTR tv324[ebp], eax
  00293	0f b6 45 e8	 movzx	 eax, BYTE PTR tv323[ebp]
  00297	50		 push	 eax
  00298	8b 4d a4	 mov	 ecx, DWORD PTR tv324[ebp]
  0029b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  002a1	89 45 a0	 mov	 DWORD PTR tv325[ebp], eax
  002a4	8b 4d a0	 mov	 ecx, DWORD PTR tv325[ebp]
  002a7	89 4d 98	 mov	 DWORD PTR $T3[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring

; 456  :         return static_cast<int_type>(EOF);

  002aa	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR $T4[ebp], -1

; 448  :         return _Left == _Right;

  002b1	8b 55 9c	 mov	 edx, DWORD PTR $T4[ebp]
  002b4	3b 55 98	 cmp	 edx, DWORD PTR $T3[ebp]
  002b7	75 09		 jne	 SHORT $LN51@operator
  002b9	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv186[ebp], 1
  002c0	eb 07		 jmp	 SHORT $LN52@operator
$LN51@operator:
  002c2	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv186[ebp], 0
$LN52@operator:
  002c9	8a 45 cc	 mov	 al, BYTE PTR tv186[ebp]
  002cc	88 45 e7	 mov	 BYTE PTR $T8[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002cf	0f b6 4d e7	 movzx	 ecx, BYTE PTR $T8[ebp]
  002d3	85 c9		 test	 ecx, ecx
  002d5	74 0b		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  002d7	8b 55 ec	 mov	 edx, DWORD PTR __State$[ebp]
  002da	83 ca 04	 or	 edx, 4
  002dd	89 55 ec	 mov	 DWORD PTR __State$[ebp], edx

; 764  :                     break;

  002e0	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  002e2	e9 60 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  002e7	6a 00		 push	 0
  002e9	6a 00		 push	 0
  002eb	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f0	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002f3	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  002f6	8b ca		 mov	 ecx, edx
  002f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  002fe	eb 1d		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00300	6a 01		 push	 1
  00302	6a 04		 push	 4
  00304	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00307	8b 08		 mov	 ecx, DWORD PTR [eax]
  00309	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0030c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0030f	8b ca		 mov	 ecx, edx
  00311	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00317	b8 00 00 00 00	 mov	 eax, $LN23@operator
  0031c	c3		 ret	 0
$LN19@operator:
  0031d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00324	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\xstring
  00326	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream

; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  0032d	6a 00		 push	 0
  0032f	8b 45 ec	 mov	 eax, DWORD PTR __State$[ebp]
  00332	50		 push	 eax
  00333	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00336	8b 11		 mov	 edx, DWORD PTR [ecx]
  00338	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0033b	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0033e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z

; 774  :     return _Ostr;

  00344	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00347	89 45 94	 mov	 DWORD PTR $T2[ebp], eax
  0034a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  00351	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  00357	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0035c	8b 45 94	 mov	 eax, DWORD PTR $T2[ebp]

; 775  : }

  0035f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00362	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00369	59		 pop	 ecx
  0036a	5f		 pop	 edi
  0036b	5e		 pop	 esi
  0036c	5b		 pop	 ebx
  0036d	8b e5		 mov	 esp, ebp
  0036f	5d		 pop	 ebp
  00370	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR __Ok$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __62D59798_ostream
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  0000d	6a 0a		 push	 10			; 0000000aH
  0000f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00017	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0001a	8b ca		 mov	 ecx, edx
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  00022	0f b6 c0	 movzx	 eax, al
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z

; 980  :     _Ostr.flush();

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ

; 981  :     return _Ostr;

  00038	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 982  : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_c6$ = -412						; size = 64
_c5$ = -348						; size = 64
_c4$ = -284						; size = 64
_c3$ = -220						; size = 64
_c2$ = -156						; size = 64
_c1$ = -92						; size = 64
_var1$ = -28						; size = 4
_var2$ = -24						; size = 4
_var3$ = -20						; size = 4
_var4$ = -16						; size = 4
_var5$ = -12						; size = 4
_var6$ = -8						; size = 4
_i$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC

; 141  : int main(int argc, char** argv) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 9c 01 00
	00		 sub	 esp, 412		; 0000019cH
  00009	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 142  : 
; 143  : 	float var1, var2, var3, var4, var5, var6;
; 144  : 	int i;
; 145  : 
; 146  : 	QPTimer c1, c2, c3, c4, c5, c6;

  00013	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  00016	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  0001b	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00021	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00026	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00031	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00037	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  0003c	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  00042	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer
  00047	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0QPTimer@@QAE@XZ	; QPTimer::QPTimer

; 147  : 
; 148  : 	c1.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  00052	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  00055	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 149  : 	// measuring tests
; 150  : 	for (i = 0; i < N_REPETIC; i++) {

  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN4@main
$LN2@main:
  00063	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@main:
  0006c	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00073	7d 27		 jge	 SHORT $LN3@main

; 151  : 		vectors_init();

  00075	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 152  : 		c1.Start();  // start timer

  0007a	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  0007d	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 153  : 		var1 = example(); // Do the test

  00082	e8 00 00 00 00	 call	 ?example@@YAMXZ		; example
  00087	d9 5d e4	 fstp	 DWORD PTR _var1$[ebp]

; 154  : 		c1.Stop();  // stop timer

  0008a	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  0008d	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 155  : 		c1.Reset();

  00092	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  00095	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 156  : 	}

  0009a	eb c7		 jmp	 SHORT $LN2@main
$LN3@main:

; 157  : 	// end of    testing
; 158  : 
; 159  : 	c2.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  0009c	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000a2	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 160  : 	// measuring tests
; 161  : 	for (i = 0; i < N_REPETIC; i++) {

  000a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ae	eb 09		 jmp	 SHORT $LN7@main
$LN5@main:
  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b3	83 c1 01	 add	 ecx, 1
  000b6	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN7@main:
  000b9	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  000c0	7d 30		 jge	 SHORT $LN6@main

; 162  : 		vectors_init();

  000c2	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 163  : 		c2.Start();  // start timer

  000c7	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000cd	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 164  : 		var2 = apartadoA(); // Do the test

  000d2	e8 00 00 00 00	 call	 ?apartadoA@@YAMXZ	; apartadoA
  000d7	d9 5d e8	 fstp	 DWORD PTR _var2$[ebp]

; 165  : 		c2.Stop();  // stop timer

  000da	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000e0	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 166  : 		c2.Reset();

  000e5	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  000eb	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 167  : 	}

  000f0	eb be		 jmp	 SHORT $LN5@main
$LN6@main:

; 168  : 	c3.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  000f2	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  000f8	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 169  : 	// measuring tests
; 170  : 	for (i = 0; i < N_REPETIC; i++) {

  000fd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00104	eb 09		 jmp	 SHORT $LN10@main
$LN8@main:
  00106	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00109	83 c2 01	 add	 edx, 1
  0010c	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN10@main:
  0010f	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00116	7d 30		 jge	 SHORT $LN9@main

; 171  : 		vectors_init();

  00118	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 172  : 		c3.Start();  // start timer

  0011d	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  00123	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 173  : 		var3 = apartadoBPrimeraOpcion(); // Do the test

  00128	e8 00 00 00 00	 call	 ?apartadoBPrimeraOpcion@@YAMXZ ; apartadoBPrimeraOpcion
  0012d	d9 5d ec	 fstp	 DWORD PTR _var3$[ebp]

; 174  : 		c3.Stop();  // stop timer

  00130	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  00136	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 175  : 		c3.Reset();

  0013b	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  00141	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 176  : 	}

  00146	eb be		 jmp	 SHORT $LN8@main
$LN9@main:

; 177  : 	c4.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  00148	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  0014e	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 178  : 	// measuring tests
; 179  : 	for (i = 0; i < N_REPETIC; i++) {

  00153	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0015a	eb 09		 jmp	 SHORT $LN13@main
$LN11@main:
  0015c	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0015f	83 c0 01	 add	 eax, 1
  00162	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN13@main:
  00165	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  0016c	7d 30		 jge	 SHORT $LN12@main

; 180  : 		vectors_init();

  0016e	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 181  : 		c4.Start();  // start timer

  00173	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00179	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 182  : 		var4 = apartadoBSegundaOpcion(); // Do the test

  0017e	e8 00 00 00 00	 call	 ?apartadoBSegundaOpcion@@YAMXZ ; apartadoBSegundaOpcion
  00183	d9 5d f0	 fstp	 DWORD PTR _var4$[ebp]

; 183  : 		c4.Stop();  // stop timer

  00186	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  0018c	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 184  : 		c4.Reset();

  00191	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00197	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 185  : 	}

  0019c	eb be		 jmp	 SHORT $LN11@main
$LN12@main:

; 186  : 	c5.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  0019e	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  001a4	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 187  : 	// measuring tests
; 188  : 	for (i = 0; i < N_REPETIC; i++) {

  001a9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001b0	eb 09		 jmp	 SHORT $LN16@main
$LN14@main:
  001b2	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b5	83 c1 01	 add	 ecx, 1
  001b8	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN16@main:
  001bb	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  001c2	7d 30		 jge	 SHORT $LN15@main

; 189  : 		vectors_init();

  001c4	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 190  : 		c5.Start();  // start timer

  001c9	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  001cf	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 191  : 		var5 = apartadoCPrimeraCond(); // Do the test

  001d4	e8 00 00 00 00	 call	 ?apartadoCPrimeraCond@@YAMXZ ; apartadoCPrimeraCond
  001d9	d9 5d f4	 fstp	 DWORD PTR _var5$[ebp]

; 192  : 		c5.Stop();  // stop timer

  001dc	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  001e2	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 193  : 		c5.Reset();

  001e7	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  001ed	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 194  : 	}

  001f2	eb be		 jmp	 SHORT $LN14@main
$LN15@main:

; 195  : 	c6.Calibrate(); //calibrates timer overhead and set cronometer to zero	

  001f4	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  001fa	e8 00 00 00 00	 call	 ?Calibrate@QPTimer@@QAEXXZ ; QPTimer::Calibrate

; 196  : 	// measuring tests
; 197  : 	for (i = 0; i < N_REPETIC; i++) {

  001ff	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00206	eb 09		 jmp	 SHORT $LN19@main
$LN17@main:
  00208	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0020b	83 c2 01	 add	 edx, 1
  0020e	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN19@main:
  00211	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _i$[ebp], 256	; 00000100H
  00218	7d 30		 jge	 SHORT $LN18@main

; 198  : 		vectors_init();

  0021a	e8 00 00 00 00	 call	 ?vectors_init@@YAXXZ	; vectors_init

; 199  : 		c6.Start();  // start timer

  0021f	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  00225	e8 00 00 00 00	 call	 ?Start@QPTimer@@QAEXXZ	; QPTimer::Start

; 200  : 		var6 = apartadoCSegundaCond(); // Do the test

  0022a	e8 00 00 00 00	 call	 ?apartadoCSegundaCond@@YAMXZ ; apartadoCSegundaCond
  0022f	d9 5d f8	 fstp	 DWORD PTR _var6$[ebp]

; 201  : 		c6.Stop();  // stop timer

  00232	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  00238	e8 00 00 00 00	 call	 ?Stop@QPTimer@@QAEXXZ	; QPTimer::Stop

; 202  : 		c6.Reset();

  0023d	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  00243	e8 00 00 00 00	 call	 ?Reset@QPTimer@@QAEXXZ	; QPTimer::Reset

; 203  : 	}

  00248	eb be		 jmp	 SHORT $LN17@main
$LN18@main:

; 204  : 	// end of    testing
; 205  : 
; 206  : 	cout << endl << "ONLY PRINTING OUTPUT VARIABLE TO PREVENT THAT THE COMPILER ELIMINATES FUNCTION CALLS: "

  0024a	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0024f	51		 push	 ecx
  00250	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _var6$[ebp]
  00255	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  0025a	68 00 00 00 00	 push	 OFFSET $SG121615
  0025f	51		 push	 ecx
  00260	c5 fa 10 45 f4	 vmovss	 xmm0, DWORD PTR _var5$[ebp]
  00265	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  0026a	68 00 00 00 00	 push	 OFFSET $SG121616
  0026f	51		 push	 ecx
  00270	c5 fa 10 45 f0	 vmovss	 xmm0, DWORD PTR _var4$[ebp]
  00275	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  0027a	68 00 00 00 00	 push	 OFFSET $SG121617
  0027f	51		 push	 ecx
  00280	c5 fa 10 45 ec	 vmovss	 xmm0, DWORD PTR _var3$[ebp]
  00285	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  0028a	68 00 00 00 00	 push	 OFFSET $SG121618
  0028f	51		 push	 ecx
  00290	c5 fa 10 45 e8	 vmovss	 xmm0, DWORD PTR _var2$[ebp]
  00295	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  0029a	68 00 00 00 00	 push	 OFFSET $SG121619
  0029f	51		 push	 ecx
  002a0	c5 fa 10 45 e4	 vmovss	 xmm0, DWORD PTR _var1$[ebp]
  002a5	c5 fa 11 04 24	 vmovss	 DWORD PTR [esp], xmm0
  002aa	68 00 00 00 00	 push	 OFFSET $SG121620
  002af	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  002b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  002c0	50		 push	 eax
  002c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002c6	83 c4 08	 add	 esp, 8
  002c9	8b c8		 mov	 ecx, eax
  002cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  002d1	50		 push	 eax
  002d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002d7	83 c4 08	 add	 esp, 8
  002da	8b c8		 mov	 ecx, eax
  002dc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  002e2	50		 push	 eax
  002e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002e8	83 c4 08	 add	 esp, 8
  002eb	8b c8		 mov	 ecx, eax
  002ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  002f3	50		 push	 eax
  002f4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002f9	83 c4 08	 add	 esp, 8
  002fc	8b c8		 mov	 ecx, eax
  002fe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0030a	83 c4 08	 add	 esp, 8
  0030d	8b c8		 mov	 ecx, eax
  0030f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00315	50		 push	 eax
  00316	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0031b	83 c4 08	 add	 esp, 8
  0031e	8b c8		 mov	 ecx, eax
  00320	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@M@Z
  00326	8b c8		 mov	 ecx, eax
  00328	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 207  : 		<< var1 << ", " << var2 << ", " << var3 << ", " << var4 << ", " << var5 << ", " << var6 << endl;
; 208  : 
; 209  : 	cout << "-Number of elements N_ELEM: " << N_ELEM << endl;

  0032e	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00333	68 00 08 00 00	 push	 2048			; 00000800H
  00338	68 00 00 00 00	 push	 OFFSET $SG121621
  0033d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00342	50		 push	 eax
  00343	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00348	83 c4 08	 add	 esp, 8
  0034b	8b c8		 mov	 ecx, eax
  0034d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00353	8b c8		 mov	 ecx, eax
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 210  : 	cout << "-Number of measures example: " << c1.NumberOfMeasures() << endl;

  0035b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00360	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  00363	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  00368	50		 push	 eax
  00369	68 00 00 00 00	 push	 OFFSET $SG121622
  0036e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00374	51		 push	 ecx
  00375	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0037a	83 c4 08	 add	 esp, 8
  0037d	8b c8		 mov	 ecx, eax
  0037f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00385	8b c8		 mov	 ecx, eax
  00387	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 211  : 	cout << "-Number of measures Apartado A: " << c2.NumberOfMeasures() << endl;

  0038d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00392	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  00398	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  0039d	50		 push	 eax
  0039e	68 00 00 00 00	 push	 OFFSET $SG121623
  003a3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003a9	52		 push	 edx
  003aa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003af	83 c4 08	 add	 esp, 8
  003b2	8b c8		 mov	 ecx, eax
  003b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003ba	8b c8		 mov	 ecx, eax
  003bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 212  : 	cout << "-Number of measures Apartado B(1): " << c3.NumberOfMeasures() << endl;

  003c2	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003c7	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  003cd	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  003d2	50		 push	 eax
  003d3	68 00 00 00 00	 push	 OFFSET $SG121624
  003d8	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003dd	50		 push	 eax
  003de	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003e3	83 c4 08	 add	 esp, 8
  003e6	8b c8		 mov	 ecx, eax
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  003ee	8b c8		 mov	 ecx, eax
  003f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 213  : 	cout << "-Number of measures Apartado B(2): " << c4.NumberOfMeasures() << endl;

  003f6	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  003fb	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00401	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  00406	50		 push	 eax
  00407	68 00 00 00 00	 push	 OFFSET $SG121625
  0040c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00412	51		 push	 ecx
  00413	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00418	83 c4 08	 add	 esp, 8
  0041b	8b c8		 mov	 ecx, eax
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00423	8b c8		 mov	 ecx, eax
  00425	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 214  : 	cout << "-Number of measures Apartado C(1): " << c5.NumberOfMeasures() << endl;

  0042b	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00430	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  00436	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  0043b	50		 push	 eax
  0043c	68 00 00 00 00	 push	 OFFSET $SG121626
  00441	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00447	52		 push	 edx
  00448	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0044d	83 c4 08	 add	 esp, 8
  00450	8b c8		 mov	 ecx, eax
  00452	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00458	8b c8		 mov	 ecx, eax
  0045a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 215  : 	cout << "-Number of measures Apartado C(2): " << c6.NumberOfMeasures() << endl;

  00460	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00465	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  0046b	e8 00 00 00 00	 call	 ?NumberOfMeasures@QPTimer@@QAEHXZ ; QPTimer::NumberOfMeasures
  00470	50		 push	 eax
  00471	68 00 00 00 00	 push	 OFFSET $SG121627
  00476	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00481	83 c4 08	 add	 esp, 8
  00484	8b c8		 mov	 ecx, eax
  00486	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0048c	8b c8		 mov	 ecx, eax
  0048e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 216  : 	cout << endl;

  00494	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00499	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0049f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 217  : 
; 218  : 	// uncomment this if more timing results were needed:
; 219  : 	/*c1.PrintMinimumTime   (" Minimum time in seconds for example is:   ");
; 220  : 	c1.PrintMeanTime      (" Mean time in seconds    for example is:   ");
; 221  : 
; 222  : 	c2.PrintMinimumCycles (" Minimum time in cycles for problem  is:   ");
; 223  : 	c2.PrintMeanCycles    (" Mean time in cycles for problem is    :   ");
; 224  : 	*/
; 225  : 
; 226  : 	c1.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'example' is: ", N_ELEM);

  004a5	68 00 08 00 00	 push	 2048			; 00000800H
  004aa	68 00 00 00 00	 push	 OFFSET $SG121628
  004af	8d 4d a4	 lea	 ecx, DWORD PTR _c1$[ebp]
  004b2	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 227  : 	cout << endl;

  004b7	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 228  : 
; 229  : 	c2.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'Apartado A' is: ", N_ELEM);

  004c8	68 00 08 00 00	 push	 2048			; 00000800H
  004cd	68 00 00 00 00	 push	 OFFSET $SG121629
  004d2	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _c2$[ebp]
  004d8	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 230  : 	cout << endl;

  004dd	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  004e2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 231  : 
; 232  : 	c3.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'Apartado B(1)' is: ", N_ELEM);

  004ee	68 00 08 00 00	 push	 2048			; 00000800H
  004f3	68 00 00 00 00	 push	 OFFSET $SG121630
  004f8	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _c3$[ebp]
  004fe	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 233  : 	cout << endl;

  00503	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00508	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0050e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 234  : 
; 235  : 	c4.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'Apartado B(2)' is: ", N_ELEM);

  00514	68 00 08 00 00	 push	 2048			; 00000800H
  00519	68 00 00 00 00	 push	 OFFSET $SG121631
  0051e	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _c4$[ebp]
  00524	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 236  : 	cout << endl;

  00529	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0052e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00534	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 237  : 
; 238  : 	c5.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'Apartado C(1)' is: ", N_ELEM);

  0053a	68 00 08 00 00	 push	 2048			; 00000800H
  0053f	68 00 00 00 00	 push	 OFFSET $SG121632
  00544	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR _c5$[ebp]
  0054a	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 239  : 	cout << endl;

  0054f	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00554	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 240  : 
; 241  : 	c6.PrintMinimumCyclesByIteration(" Minimum time in cycles for an element of 'Apartado C(2)' is: ", N_ELEM);

  00560	68 00 08 00 00	 push	 2048			; 00000800H
  00565	68 00 00 00 00	 push	 OFFSET $SG121633
  0056a	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR _c6$[ebp]
  00570	e8 00 00 00 00	 call	 ?PrintMinimumCyclesByIteration@QPTimer@@QAEXPBDH@Z ; QPTimer::PrintMinimumCyclesByIteration

; 242  : 	cout << endl;

  00575	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0057a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00580	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 243  : 	cout << endl;

  00586	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0058b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00591	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z

; 244  : }

  00597	33 c0		 xor	 eax, eax
  00599	8b e5		 mov	 esp, ebp
  0059b	5d		 pop	 ebp
  0059c	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
?example@@YAMXZ PROC					; example

; 132  : float example() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  : 	int i;
; 134  : 	for (i = 0; i < N_ELEM; i++) {

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	eb 09		 jmp	 SHORT $LN4@example
$LN2@example:
  00017	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@example:
  00020	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00027	7d 22		 jge	 SHORT $LN3@example

; 135  : 		a[i] = b[i] + 8;

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0002c	c5 fa 10 04 8d
	00 00 00 00	 vmovss	 xmm0, DWORD PTR ?b@@3PAMA[ecx*4]
  00035	c5 fa 58 05 00
	00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR __real@41000000
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00040	c5 fa 11 04 95
	00 00 00 00	 vmovss	 DWORD PTR ?a@@3PAMA[edx*4], xmm0

; 136  : 	}

  00049	eb cc		 jmp	 SHORT $LN2@example
$LN3@example:

; 137  : 	return a[N_ELEM - 1];

  0004b	b8 04 00 00 00	 mov	 eax, 4
  00050	69 c8 ff 07 00
	00		 imul	 ecx, eax, 2047
  00056	d9 81 00 00 00
	00		 fld	 DWORD PTR ?a@@3PAMA[ecx]

; 138  : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?example@@YAMXZ ENDP					; example
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_z$ = -8						; size = 4
_i$ = -4						; size = 4
?apartadoCSegundaCond@@YAMXZ PROC			; apartadoCSegundaCond

; 121  : float apartadoCSegundaCond() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  : 	int  i;
; 123  : 	float z = 0.0;

  00010	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00014	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 124  : 	for (i = 0; i < N_ELEM; i++) {

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@apartadoCS
$LN2@apartadoCS:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apartadoCS:
  0002b	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00032	7d 21		 jge	 SHORT $LN3@apartadoCS

; 125  : 		if (cond1) {

  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?cond1@@3PAHA ; cond1
  00039	85 c9		 test	 ecx, ecx
  0003b	74 16		 je	 SHORT $LN5@apartadoCS

; 126  : 			z = z + a[i];

  0003d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00040	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _z$[ebp]
  00045	c5 fa 58 04 95
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?a@@3PAMA[edx*4]
  0004e	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0
$LN5@apartadoCS:

; 127  : 		}
; 128  : 	}

  00053	eb cd		 jmp	 SHORT $LN2@apartadoCS
$LN3@apartadoCS:

; 129  : 	return z;

  00055	d9 45 f8	 fld	 DWORD PTR _z$[ebp]

; 130  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?apartadoCSegundaCond@@YAMXZ ENDP			; apartadoCSegundaCond
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_z$ = -8						; size = 4
_i$ = -4						; size = 4
?apartadoCPrimeraCond@@YAMXZ PROC			; apartadoCPrimeraCond

; 110  : float apartadoCPrimeraCond() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  : 	int  i;
; 112  : 	float z = 0.0;

  00010	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00014	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 113  : 	for (i = 0; i < N_ELEM; i++) {

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@apartadoCP
$LN2@apartadoCP:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apartadoCP:
  0002b	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00032	7d 21		 jge	 SHORT $LN3@apartadoCP

; 114  : 		if (cond3) {

  00034	b9 00 00 00 00	 mov	 ecx, OFFSET ?cond3@@3PAHA ; cond3
  00039	85 c9		 test	 ecx, ecx
  0003b	74 16		 je	 SHORT $LN5@apartadoCP

; 115  : 			z = z + a[i];

  0003d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00040	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _z$[ebp]
  00045	c5 fa 58 04 95
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?a@@3PAMA[edx*4]
  0004e	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0
$LN5@apartadoCP:

; 116  : 		}
; 117  : 	}

  00053	eb cd		 jmp	 SHORT $LN2@apartadoCP
$LN3@apartadoCP:

; 118  : 	return z;

  00055	d9 45 f8	 fld	 DWORD PTR _z$[ebp]

; 119  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?apartadoCPrimeraCond@@YAMXZ ENDP			; apartadoCPrimeraCond
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_z$ = -8						; size = 4
_i$ = -4						; size = 4
?apartadoBSegundaOpcion@@YAMXZ PROC			; apartadoBSegundaOpcion

; 101  : float apartadoBSegundaOpcion() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 102  : 	int  i;
; 103  : 	float z = 0.0;

  00010	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00014	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 104  : 	for (i = 0; i < N_ELEM; i++) {

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@apartadoBS
$LN2@apartadoBS:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apartadoBS:
  0002b	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00032	7d 28		 jge	 SHORT $LN3@apartadoBS

; 105  : 		z = (z + a[i]) + 3.0;

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00037	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _z$[ebp]
  0003c	c5 fa 58 04 8d
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?a@@3PAMA[ecx*4]
  00045	c5 fa 5a c0	 vcvtss2sd xmm0, xmm0, xmm0
  00049	c5 fb 58 05 00
	00 00 00	 vaddsd	 xmm0, xmm0, QWORD PTR __real@4008000000000000
  00051	c5 fb 5a c0	 vcvtsd2ss xmm0, xmm0, xmm0
  00055	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 106  : 	}

  0005a	eb c6		 jmp	 SHORT $LN2@apartadoBS
$LN3@apartadoBS:

; 107  : 	return z;

  0005c	d9 45 f8	 fld	 DWORD PTR _z$[ebp]

; 108  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
?apartadoBSegundaOpcion@@YAMXZ ENDP			; apartadoBSegundaOpcion
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_z$ = -8						; size = 4
_i$ = -4						; size = 4
?apartadoBPrimeraOpcion@@YAMXZ PROC			; apartadoBPrimeraOpcion

; 92   : float apartadoBPrimeraOpcion() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 93   : 	int  i;
; 94   : 	float z = 0.0;

  00010	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00014	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 95   : 	for (i = 0; i < N_ELEM; i++) {

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@apartadoBP
$LN2@apartadoBP:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apartadoBP:
  0002b	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00032	7d 24		 jge	 SHORT $LN3@apartadoBP

; 96   : 		z = (z + a[i]) + b[i];

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00037	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _z$[ebp]
  0003c	c5 fa 58 04 8d
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?a@@3PAMA[ecx*4]
  00045	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00048	c5 fa 58 04 95
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?b@@3PAMA[edx*4]
  00051	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 97   : 	}

  00056	eb ca		 jmp	 SHORT $LN2@apartadoBP
$LN3@apartadoBP:

; 98   : 	return z;

  00058	d9 45 f8	 fld	 DWORD PTR _z$[ebp]

; 99   : }

  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?apartadoBPrimeraOpcion@@YAMXZ ENDP			; apartadoBPrimeraOpcion
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_z$ = -8						; size = 4
_i$ = -4						; size = 4
?apartadoA@@YAMXZ PROC					; apartadoA

; 82   : float apartadoA() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  0000b	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 83   : 	int  i;
; 84   : 	float z = 0.0;

  00010	c5 f8 57 c0	 vxorps	 xmm0, xmm0, xmm0
  00014	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 85   : 	for (i = 0; i < N_ELEM; i++)

  00019	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00020	eb 09		 jmp	 SHORT $LN4@apartadoA
$LN2@apartadoA:
  00022	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00025	83 c0 01	 add	 eax, 1
  00028	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@apartadoA:
  0002b	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00032	7d 18		 jge	 SHORT $LN3@apartadoA

; 86   : 	{
; 87   : 		z = z + a[i];

  00034	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00037	c5 fa 10 45 f8	 vmovss	 xmm0, DWORD PTR _z$[ebp]
  0003c	c5 fa 58 04 8d
	00 00 00 00	 vaddss	 xmm0, xmm0, DWORD PTR ?a@@3PAMA[ecx*4]
  00045	c5 fa 11 45 f8	 vmovss	 DWORD PTR _z$[ebp], xmm0

; 88   : 	}

  0004a	eb d6		 jmp	 SHORT $LN2@apartadoA
$LN3@apartadoA:

; 89   : 	return z;

  0004c	d9 45 f8	 fld	 DWORD PTR _z$[ebp]

; 90   : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
?apartadoA@@YAMXZ ENDP					; apartadoA
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
_TEXT	SEGMENT
_i$ = -4						; size = 4
?vectors_init@@YAXXZ PROC				; vectors_init

; 49   : void vectors_init() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  00009	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 50   : 	int i;
; 51   : 	for (i = 0; i < N_ELEM; i++) {

  0000e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00015	eb 09		 jmp	 SHORT $LN4@vectors_in
$LN2@vectors_in:
  00017	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0001a	83 c0 01	 add	 eax, 1
  0001d	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@vectors_in:
  00020	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  00027	0f 8d 09 01 00
	00		 jge	 $LN3@vectors_in

; 52   : 		// a[i] must have little values to avoid overflow in pp1()
; 53   : 		a[i] = (float)rand() / (float)RAND_MAX;

  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  00033	c5 fa 2a c0	 vcvtsi2ss xmm0, xmm0, eax
  00037	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@46fffe00
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00042	c5 fa 11 04 8d
	00 00 00 00	 vmovss	 DWORD PTR ?a@@3PAMA[ecx*4], xmm0

; 54   : 		b[i] = (float)i / 5;

  0004b	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  00050	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@40a00000
  00058	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0005b	c5 fa 11 04 95
	00 00 00 00	 vmovss	 DWORD PTR ?b@@3PAMA[edx*4], xmm0

; 55   : 		c[i] = (float)i / 6;

  00064	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  00069	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@40c00000
  00071	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00074	c5 fa 11 04 85
	00 00 00 00	 vmovss	 DWORD PTR ?c@@3PAMA[eax*4], xmm0

; 56   : 		d[i] = (float)i / 7;

  0007d	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  00082	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@40e00000
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008d	c5 fa 11 04 8d
	00 00 00 00	 vmovss	 DWORD PTR ?d@@3PAMA[ecx*4], xmm0

; 57   : 		e[i] = (float)i / 8;

  00096	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  0009b	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@41000000
  000a3	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	c5 fa 11 04 95
	00 00 00 00	 vmovss	 DWORD PTR ?e@@3PAMA[edx*4], xmm0

; 58   : 		f[i] = (float)i / 9;

  000af	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  000b4	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@41100000
  000bc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000bf	c5 fa 11 04 85
	00 00 00 00	 vmovss	 DWORD PTR ?f@@3PAMA[eax*4], xmm0

; 59   : 		g[i] = (float)i / 10;

  000c8	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  000cd	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@41200000
  000d5	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d8	c5 fa 11 04 8d
	00 00 00 00	 vmovss	 DWORD PTR ?g@@3PAMA[ecx*4], xmm0

; 60   : 		h[i] = (float)i / 11;

  000e1	c5 fa 2a 45 fc	 vcvtsi2ss xmm0, xmm0, DWORD PTR _i$[ebp]
  000e6	c5 fa 5e 05 00
	00 00 00	 vdivss	 xmm0, xmm0, DWORD PTR __real@41300000
  000ee	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000f1	c5 fa 11 04 95
	00 00 00 00	 vmovss	 DWORD PTR ?h@@3PAMA[edx*4], xmm0

; 61   : 
; 62   : 		a_int[i] = i;

  000fa	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00100	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?a_int@@3PAHA[eax*4], ecx

; 63   : 
; 64   : 		cond1[i] = 1;

  00107	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0010a	c7 04 95 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond1@@3PAHA[edx*4], 1

; 65   : 		cond3[i] = rand() % 2;

  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__rand
  0011b	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00120	79 05		 jns	 SHORT $LN9@vectors_in
  00122	48		 dec	 eax
  00123	83 c8 fe	 or	 eax, -2			; fffffffeH
  00126	40		 inc	 eax
$LN9@vectors_in:
  00127	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0012a	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?cond3@@3PAHA[ecx*4], eax

; 66   : 	}

  00131	e9 e1 fe ff ff	 jmp	 $LN2@vectors_in
$LN3@vectors_in:

; 67   : 	for (i = 0; i < N_ELEM; i += 8) {

  00136	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0013d	eb 09		 jmp	 SHORT $LN7@vectors_in
$LN5@vectors_in:
  0013f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00142	83 c2 08	 add	 edx, 8
  00145	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN7@vectors_in:
  00148	81 7d fc 00 08
	00 00		 cmp	 DWORD PTR _i$[ebp], 2048 ; 00000800H
  0014f	7d 75		 jge	 SHORT $LN6@vectors_in

; 68   : 		// put here the pattern behaviour  you want; BTB is very clever !!
; 69   : 		cond2[i + 0] = 1;

  00151	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00154	c7 04 85 00 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[eax*4], 1

; 70   : 		cond2[i + 1] = 0;

  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00162	c7 04 8d 04 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[ecx*4+4], 0

; 71   : 		cond2[i + 2] = 1;

  0016d	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00170	c7 04 95 08 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[edx*4+8], 1

; 72   : 		cond2[i + 3] = 1;

  0017b	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0017e	c7 04 85 0c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[eax*4+12], 1

; 73   : 		cond2[i + 4] = 0;

  00189	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0018c	c7 04 8d 10 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[ecx*4+16], 0

; 74   : 		cond2[i + 5] = 1;

  00197	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0019a	c7 04 95 14 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[edx*4+20], 1

; 75   : 		cond2[i + 6] = 1;

  001a5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  001a8	c7 04 85 18 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[eax*4+24], 1

; 76   : 		cond2[i + 7] = 1;

  001b3	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  001b6	c7 04 8d 1c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ?cond2@@3PAHA[ecx*4+28], 1

; 77   : 	}

  001c1	e9 79 ff ff ff	 jmp	 $LN5@vectors_in
$LN6@vectors_in:

; 78   : }

  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c3		 ret	 0
?vectors_init@@YAXXZ ENDP				; vectors_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Users\enriq\P1-ASD\P3C-presentacion\proyecto_rdtsc\p3c_rdtsc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET __A79CFD3F_p3c_rdtsc@cpp
  00008	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
